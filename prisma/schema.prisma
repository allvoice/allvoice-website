// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  // id is the user's id in clerk
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userFavoriteJoins UserFavorites[]
  userUpvoteJoins   UserUpvotes[]
  userDownvoteJoins UserDownvotes[]

  voices     Voice[]
  seedSounds SeedSound[]
}

model SeedSound {
  id              String                 @id @default(uuid())
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  bucketKey       String                 @unique
  name            String
  // uploadComplete signifies if we've received the bucket notification indicating the file has been successfully uploaded
  uploadComplete  Boolean                @default(false)
  fileSize        BigInt?                @db.UnsignedBigInt
  voiceModelJoins VoiceModelSeedSounds[]

  uploaderId String
  uploader   User   @relation(fields: [uploaderId], references: [id])

  @@index([bucketKey])
  @@index([uploaderId])
}

model PreviewSound {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bucketKey    String     @unique
  voiceModel   VoiceModel @relation(fields: [voiceModelId], references: [id])
  voiceModelId String
  iconEmoji    String

  @@index([voiceModelId])
}

model VoiceModel {
  id             String                 @id @default(uuid())
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  soundFileJoins VoiceModelSeedSounds[]
  previewSounds  PreviewSound[]

  voiceId String
  voice   Voice  @relation(fields: [voiceId], references: [id])

  forkParentId       String?
  forkParent         VoiceModel?  @relation("VoiceForks", fields: [forkParentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  directForkChildren VoiceModel[] @relation("VoiceForks")

  version                Int                            @default(1) @db.UnsignedInt
  supportedLanguageJoins VoiceModelSupportedLanguages[]

  elevenLabsModelId         String  @default("eleven_monolingual_v1")
  elevenLabsStability       Float   @default(0.4)
  elevenLabsSimilarityBoost Float   @default(0.98)
  elevenLabsStyle           Float   @default(0.0)
  elevenLabsSpeakerBoost    Boolean @default(true)

  published Boolean @default(false)

  @@unique([voiceId, version])
  @@index([forkParentId])
  @@index([voiceId])
}

model VoiceModelSupportedLanguages {
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  languageId   String
  language     Language   @relation(fields: [languageId], references: [id])
  voiceModelId String
  voiceModel   VoiceModel @relation(fields: [voiceModelId], references: [id])

  @@id([languageId, voiceModelId])
  @@index([voiceModelId])
  @@index([languageId])
}

model Language {
  id                       String                         @id @default(uuid())
  iso639_1                 String
  displayName              String
  supportedVoiceModelJoins VoiceModelSupportedLanguages[]
}

model Voice {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerUserId String
  ownerUser   User   @relation(fields: [ownerUserId], references: [id])

  modelVersions VoiceModel[]

  name String @default("Untitled Voice")

  favorites Int @default(0) @db.UnsignedInt // up to ~4 bil
  // score is upvotes minus downvotes
  score     Int @default(0) @db.UnsignedInt // up to ~4 bil

  warcraftNpcDisplay  WacraftNpcDisplay? @relation(fields: [wacraftNpcDisplayId], references: [id])
  wacraftNpcDisplayId String?

  uniqueWarcraftNpc   UniqueWarcraftNpc? @relation(fields: [uniqueWarcraftNpcId], references: [id])
  uniqueWarcraftNpcId String?

  userFavoriteJoins UserFavorites[]
  userUpvoteJoins   UserUpvotes[]
  userDownvoteJoins UserDownvotes[]

  @@index([ownerUserId])
  @@index([wacraftNpcDisplayId])
  @@index([uniqueWarcraftNpcId])
}

model UserFavorites {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  voiceId   String
  voice     Voice    @relation(fields: [voiceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, voiceId])
  @@index([voiceId])
  @@index([userId])
}

model UserUpvotes {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  voiceId   String
  voice     Voice    @relation(fields: [voiceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, voiceId])
  @@index([voiceId])
  @@index([userId])
}

model UserDownvotes {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  voiceId   String
  voice     Voice    @relation(fields: [voiceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, voiceId])
  @@index([voiceId])
  @@index([userId])
}

model VoiceModelSeedSounds {
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  voiceModelId String
  seedSoundId  String
  voiceModel   VoiceModel @relation(fields: [voiceModelId], references: [id])
  seedSound    SeedSound  @relation(fields: [seedSoundId], references: [id])

  // active signifies if the seed sound is currently in use by the voice model
  active Boolean @default(true)

  @@id([voiceModelId, seedSoundId])
  @@index([seedSoundId])
  @@index([voiceModelId])
}

model WacraftNpcDisplay {
  id            String                @id @default(uuid())
  // modelFilePath is the path of the model used to render the NPCs
  // EX: Character\BloodElf\Female\BloodElfFemale.mdx
  modelFilePath String                @unique
  // raceId is -1 if unknown or positive if it maps to a wellknown race
  raceId        Int
  // genderId is -1 if unknown, 0 for male, 1 for female
  genderId      Int
  // voiceName is the end of the modelFilePath. This can be used for display.
  // EX: BloodElfFemale
  voiceName     String                @unique
  // npcs refers to the ingame npcs that use this display
  npcs          WarcraftNpcDisplays[]
  // voices refer to the user models that were made for this npc display
  voices        Voice[]

  @@fulltext([voiceName])
}

model WarcraftNpcDisplays {
  id        String            @id @default(uuid())
  npcId     Int
  displayId String
  npc       WarcraftNpc       @relation(fields: [npcId], references: [npcId])
  display   WacraftNpcDisplay @relation(fields: [displayId], references: [id])

  @@index([npcId])
  @@index([displayId])
}

model WarcraftNpc {
  // npcId maps to the npcId in game
  npcId    Int                   @id @db.UnsignedInt
  // a npc may have multiple displays if the same npcId is shared by multiple models
  displays WarcraftNpcDisplays[]
  // name is the npc's in game display name
  name     String

  uniqueWarcraftNpc   UniqueWarcraftNpc @relation(fields: [uniqueWarcraftNpcId], references: [id])
  uniqueWarcraftNpcId String

  @@index([uniqueWarcraftNpcId])
}

// UniqueWarcraftNpc describes NPCs as concepts.
// E.G. Thrall may have 6 npcIds in game, but he is one character.
model UniqueWarcraftNpc {
  id   String @id @default(uuid())
  // npc's in game display name (this is unique)
  name String @unique

  npcs WarcraftNpc[]

  // voices refer to the user models that were made for this npc
  voices Voice[]

  @@fulltext([name])
}
